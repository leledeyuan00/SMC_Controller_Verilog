module smc_controller(
	input u_t,
	input theta_dot,
	input theta_e,
	input theta_dote,
	output u
);

	//SMC controller variable
	reg signed [23:0] theta_dot_r;
	reg signed [31:0] theta_e_r;
	reg signed [31:0] theta_dote_r;
	parameter [3:0]k = 4'd15;
	parameter [3:0]dm = 4'd0;
	parameter [4:0]lambda = 5'd20;
	//parameter [3:0]ba = 4'd2; //?*ba --> modified "?<<1";
	parameter [12:0]ja = 13'b0001100110011; //0.1 usfix13_En12
	parameter [15:0]divided_eff = 16'b1011011011011011; // /0.35 --> *2.85714 => 2.85711669921875
	parameter [15:0] portional = 16'b0000010101110101;
	reg [31:0]s_smc;
	reg [31:0]s_smc1;
	reg [31:0]h_smc;
	reg [31:0]h_smc1;
	reg [31:0]h_smc2;
	reg [31:0]h_smc2_2;
	reg [31:0]h_smc2_2_abs;
	reg [31:0]h_smc2_2_1;
	reg [31:0]h_smc2_2_2;
	reg [31:0]h_smc3;
	reg [31:0]h_smc3_1;
	reg [31:0]h_smc3_1_abs;
	reg [31:0]u_smc;
	reg [31:0]u_smc1;
	reg [31:0]u_smc2;
	reg [31:0]u_smc3;
	reg [31:0]u_smc4;
	
	//SMC_Controller
	always@(*) begin //TODO: pipeline
	//s=en_dot+lambda*en
		s_smc1 = theta_e * lambda;
		s_smc = s_smc1 + theta_dote;
		//h=dm+0.5*ja*abs(u/0.35-lambda*theta_dot)+ba*abs(theta_dot)
		h_smc2_2_1 = u_t *divided_eff;
		h_smc2_2_2 = theta_dot * lambda;
		h_smc2_2 = h_smc2_2_1 - h_smc2_2_2;
		h_smc2_2_abs = {h_smc2_2[31]&1'b0,h_smc2_2[30:0]}; //sfix
		h_smc2 = h_smc2_2_abs * ja;
		h_smc3_1 = {1'd0,theta_dot_r} <<1;
		h_smc3_1_abs = {h_smc3_1[31]&1'b0,h_smc3_1[30:0]}; //sifx
		h_smc3 = h_smc3_1_abs >>1; //sfix
		h_smc = h_smc2 + h_smc3 +dm;
		//y=-K*s-h*sign(s)+ja*(u/0.35-lambda*theta_dot)+ba*(theta_dot)
		u_smc1 = k * s_smc;
		if(!s_smc[31])
			u_smc2 = h_smc;
		else
			u_smc2 = {h_smc[31]^1'b1,h_smc[31:0]};
		u_smc3 = ja * h_smc2_2;
		u_smc4 = theta_dot_r << 1;
		u_smc = u_smc4 + u_smc3 - u_smc2 -u_smc1;
	end
	assign u = u_smc * portional;
endmodule